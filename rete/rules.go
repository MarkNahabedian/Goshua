// Package runtime defines the runtime data structures that are
// created by the rule_compiler.

package rete

import "reflect"


type Rule interface {
	Name() string                            // defimpl:"read name"

	// RuleRunctionName is the name of the function that is called by
	// the Caller() function and implements the rule.
	RuleFunctionName() string              // defimpl:"read ruleFunctionName"

	// Installer adds the implementation of the rule to the rete
	// represented by this given root node.
	Installer() func(Node)              // defimpl:"read installer"

	// Caller is the function that destructures the join results and
	// calls the rule function.
	Caller() func(Node, []interface{})     // defimpl:"read caller"

	// ParamTypes lists the types of the rule's parameters.
	ParamTypes() []reflect.Type               // defimpl:"read paramTypes"

	// EmitTypess lists the types of objects that the rule can Emit.
	EmitTypes() []reflect.Type                 // defimpl:"read emitTypes"
}


// AllRules is a catalog describing all compiled rules that are loaded
// into the program
var AllRules []Rule = []Rule{}


// AddRule adds a rule to AllRules.  It is called by the code that is
// generated by the rule_compiler.
func AddRule(name string,
		ruleFunctionName string,
		installer func(Node),
		caller func(Node, []interface{}),
		paramTypes []reflect.Type,
		emitTypes []reflect.Type) Rule {
	// Body
	rule := &RuleImpl{
		name: name,
		ruleFunctionName: ruleFunctionName,
		installer: installer,
		caller: caller,
		paramTypes: paramTypes,
		emitTypes: emitTypes,
	}
	AllRules = append(AllRules, rule)
	return rule
}

