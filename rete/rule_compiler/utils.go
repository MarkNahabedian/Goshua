// Utility functions for the rule compiler.

package main

import "fmt"
import "os"
import "path"
import "strings"
import "go/ast"
import "go/format"
import "go/token"

const ruleNamePrefix = "rule_"

func ruleBaseName(ruleName string) string {
	return strings.TrimPrefix(ruleName, ruleNamePrefix)
}

// RuleInserterName synthesizes the canonical name for the function that
// inserts a rule implementation into a rete.
func RuleInserterName(ruleName string) string {
	return ruleBaseName(ruleName) + "Rule"
}

// RuleFunctionName synthesizes the canonical name for the function that
// implements the body of the rule.
func RuleFunctionName(ruleName string) string {
	return ruleBaseName(ruleName) + "Function"
}


func fullFilePath(pth string) string {
	if path.IsAbs(pth) {
		return pth
	}
	wd, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	return path.Join(wd, pth)
}


func writeFile(fset *token.FileSet, astf *ast.File, filename string) {
	out, err := os.Create(filename)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Can't create %s: %s", filename, err)
		return
	}
	fmt.Fprintf(out, "// This file was automatically generated by %s from %s.\n",
		os.Args[0], filename)
	// The documentation for (go/printer).Fprint suggests that the
	// output of format.Node is more consistent with that of gofmt.
	format.Node(out, fset, astf)
	out.Close()
}

func dumpOffendingAstFile(astf *ast.File) {
	writeFile(token.NewFileSet(), astf, "BAD_TRANSLATION")
}

