// Package runtime defines the runtime data structures that are
// created by the rule_compiler.

package runtime

import "goshua/rete"

type Rule interface {
	Name() string
	Inserter() func(rete.Node)
	TestAndAssertFunctionName() string
}

// AllRules is a catalog describing all compiled rules that are loaded
// into the program
var AllRules []Rule = []Rule{}

// AddRule adds a rule to AllRules.  It is called by the code that is
// generated by the rule_compiler.
func AddRule(name string, inserter func(rete.Node), testAndAssertFunctionName string) {
	AllRules = append(AllRules, &rule{
		name: name,
		inserter: inserter,
		testAndAssertFunctionName: testAndAssertFunctionName,
	})
}

type rule struct {
	Rule
	name string
	inserter func(rete.Node)
	testAndAssertFunctionName string
}

func (r *rule) Name() string { return r.name }

func (r *rule) Inserter() func(rete.Node) { return r.inserter }

func (r *rule) TestAndAssertFunctionName() string {
	return r.testAndAssertFunctionName
}

